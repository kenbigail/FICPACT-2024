// node_modules/jwt-decode/build/esm/index.js
var InvalidTokenError = class extends Error {
};
InvalidTokenError.prototype.name = "InvalidTokenError";
function b64DecodeUnicode(str) {
  return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {
    let code = p.charCodeAt(0).toString(16).toUpperCase();
    if (code.length < 2) {
      code = "0" + code;
    }
    return "%" + code;
  }));
}
function base64UrlDecode(str) {
  let output = str.replace(/-/g, "+").replace(/_/g, "/");
  switch (output.length % 4) {
    case 0:
      break;
    case 2:
      output += "==";
      break;
    case 3:
      output += "=";
      break;
    default:
      throw new Error("base64 string is not of the correct length");
  }
  try {
    return b64DecodeUnicode(output);
  } catch (err) {
    return atob(output);
  }
}
function jwtDecode(token, options) {
  if (typeof token !== "string") {
    throw new InvalidTokenError("Invalid token specified: must be a string");
  }
  options || (options = {});
  const pos = options.header === true ? 0 : 1;
  const part = token.split(".")[pos];
  if (typeof part !== "string") {
    throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);
  }
  let decoded;
  try {
    decoded = base64UrlDecode(part);
  } catch (e) {
    throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);
  }
  try {
    return JSON.parse(decoded);
  } catch (e) {
    throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);
  }
}

// node_modules/@kinde-oss/kinde-auth-pkce-js/dist/kinde-auth-pkce-js.esm.js
var version = "3.0.30";
var SESSION_PREFIX = "pkce-code-verifier";
var flagDataTypeMap;
(function(flagDataTypeMap2) {
  flagDataTypeMap2["s"] = "string";
  flagDataTypeMap2["i"] = "integer";
  flagDataTypeMap2["b"] = "boolean";
})(flagDataTypeMap || (flagDataTypeMap = {}));
function base64UrlEncode(str) {
  const numberArray = Array.from(new Uint8Array(str));
  return btoa(String.fromCharCode.apply(null, numberArray)).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
function sha256(plain) {
  const encoder = new TextEncoder();
  const data = encoder.encode(plain);
  return window.crypto.subtle.digest("SHA-256", data);
}
async function pkceChallengeFromVerifier(v) {
  const hashed = await sha256(v);
  return base64UrlEncode(hashed);
}
function randomString() {
  const array = new Uint32Array(28);
  window.crypto.getRandomValues(array);
  return Array.from(array, (dec) => ("0" + dec.toString(16)).substr(-2)).join("");
}
var isValidJwt = (jwtToken) => {
  const unixTime = Math.floor(Date.now() / 1e3);
  return jwtToken.exp > unixTime;
};
var setupChallenge = async (authorizationEndpoint, appState) => {
  const state = randomString();
  const code_verifier = randomString();
  const code_challenge = await pkceChallengeFromVerifier(code_verifier);
  sessionStorage.setItem(`${SESSION_PREFIX}-${state}`, JSON.stringify({
    codeVerifier: code_verifier,
    appState
  }));
  const url = new URL(authorizationEndpoint);
  return { state, code_challenge, url };
};
var createStore = () => {
  let items = {};
  const getItem = (key) => {
    return items[key];
  };
  const setItem = (key, value) => {
    items[key] = value;
  };
  const removeItem = (key) => {
    delete items[key];
  };
  const reset = () => {
    items = {};
  };
  return {
    reset,
    getItem,
    removeItem,
    setItem
  };
};
var store = createStore();
var getClaim = (claim, tokenKey = "access_token") => {
  const token = store.getItem(`kinde_${tokenKey}`);
  return token ? { name: claim, value: token[claim] } : null;
};
var getClaimValue = (claim, tokenKey = "access_token") => {
  const obj = getClaim(claim, tokenKey);
  return obj && obj.value;
};
var getFlag = (code, defaultValue, flagType) => {
  const flags = getClaimValue("feature_flags");
  const flag = flags && flags[code] ? flags[code] : {};
  if (flag.v == null && defaultValue == null) {
    throw Error(`Flag ${code} was not found, and no default value has been provided`);
  }
  if (flagType && flag.t && flagType !== flag.t) {
    throw Error(`Flag ${code} is of type ${flagDataTypeMap[flag.t]} - requested type ${flagDataTypeMap[flagType]}`);
  }
  return {
    code,
    type: flagDataTypeMap[flag.t || flagType],
    value: flag.v == null ? defaultValue : flag.v,
    is_default: flag.v == null
  };
};
var getBooleanFlag = (code, defaultValue) => {
  try {
    const flag = getFlag(code, defaultValue, "b");
    return flag.value;
  } catch (err) {
    console.error(err);
    return err;
  }
};
var getIntegerFlag = (code, defaultValue) => {
  try {
    const flag = getFlag(code, defaultValue, "i");
    return flag.value;
  } catch (err) {
    console.error(err);
    return err;
  }
};
var getStringFlag = (code, defaultValue) => {
  try {
    const flag = getFlag(code, defaultValue, "s");
    return flag.value;
  } catch (err) {
    console.error(err);
    return err;
  }
};
var getUserOrganizations = () => {
  const orgCodes = getClaimValue("org_codes", "id_token") ?? [];
  return {
    orgCodes
  };
};
var createKindeClient = async (options) => {
  if (!options) {
    throw Error("Please provide your Kinde credentials");
  }
  if (options !== Object(options)) {
    throw Error("The Kinde SDK must be initiated with an object");
  }
  const { audience, client_id: clientId, domain, is_dangerously_use_local_storage = false, redirect_uri, logout_uri = redirect_uri, on_redirect_callback, scope = "openid profile email offline", proxy_redirect_uri, _framework, _frameworkVersion } = options;
  if (audience && typeof audience !== "string") {
    throw Error("Please supply a valid audience for your api");
  }
  if (scope && typeof scope !== "string") {
    throw Error("Please supply a valid scope");
  }
  if (!redirect_uri || typeof options.redirect_uri !== "string") {
    throw Error("Please supply a valid redirect_uri for your users to be redirected after successful authentication");
  }
  if (!domain || typeof domain !== "string") {
    throw Error("Please supply a valid Kinde domain so we can connect to your account");
  }
  if (typeof is_dangerously_use_local_storage !== "boolean") {
    throw TypeError("Please supply a boolean value for is_dangerously_use_local_storage");
  }
  const client_id = clientId || "spa@live";
  const is_use_cookie = !is_dangerously_use_local_storage && !domain.includes(".kinde.com");
  const config = {
    audience,
    client_id,
    redirect_uri,
    authorization_endpoint: `${domain}/oauth2/auth`,
    token_endpoint: `${domain}/oauth2/token`,
    requested_scopes: scope,
    domain,
    _framework,
    _frameworkVersion
  };
  const setStore = (data) => {
    if (!data || data.error)
      return;
    const accessToken = jwtDecode(data.access_token);
    const idToken = jwtDecode(data.id_token);
    store.setItem("kinde_token", data);
    store.setItem("kinde_access_token", accessToken);
    store.setItem("kinde_id_token", idToken);
    store.setItem("user", {
      id: idToken.sub,
      given_name: idToken.given_name,
      family_name: idToken.family_name,
      email: idToken.email,
      picture: idToken.picture
    });
    if (is_dangerously_use_local_storage) {
      localStorage.setItem("kinde_refresh_token", data.refresh_token);
    } else {
      store.setItem("kinde_refresh_token", data.refresh_token);
    }
  };
  const useRefreshToken = async ({ tokenType } = { tokenType: "kinde_access_token" }) => {
    const refresh_token = is_dangerously_use_local_storage ? localStorage.getItem("kinde_refresh_token") : store.getItem("kinde_refresh_token");
    if (refresh_token || is_use_cookie) {
      try {
        const response = await fetch(config.token_endpoint, {
          method: "POST",
          ...is_use_cookie && { credentials: "include" },
          headers: new Headers({
            "Content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Kinde-SDK": `
            ${config._framework || "JavaScript"}/${config._frameworkVersion || version}`
          }),
          body: new URLSearchParams({
            client_id: config.client_id,
            grant_type: "refresh_token",
            ...!is_use_cookie && refresh_token && { refresh_token }
          })
        });
        const data = await response.json();
        setStore(data);
        if (tokenType === "kinde_id_token") {
          return data.id_token;
        }
        return data.access_token;
      } catch (err) {
        console.error(err);
      }
    }
  };
  const getTokenType = async (tokenType) => {
    const token = store.getItem("kinde_token");
    if (!token) {
      return await useRefreshToken({ tokenType });
    }
    const tokenToReturn = store.getItem(tokenType);
    const isTokenValid = isValidJwt(tokenToReturn);
    if (isTokenValid) {
      return tokenType === "kinde_access_token" ? token.access_token : token.id_token;
    } else {
      return await useRefreshToken({ tokenType });
    }
  };
  const getToken = async () => {
    return await getTokenType("kinde_access_token");
  };
  const getIdToken = async () => {
    return await getTokenType("kinde_id_token");
  };
  const isAuthenticated = async () => {
    const accessToken = store.getItem("kinde_access_token");
    if (!accessToken) {
      return false;
    }
    const isTokenValid = isValidJwt(accessToken);
    if (isTokenValid) {
      return true;
    }
    await useRefreshToken();
    return true;
  };
  const getPermissions = () => {
    const orgCode = getClaimValue("org_code");
    const permissions = getClaimValue("permissions") ?? [];
    return {
      permissions,
      orgCode
    };
  };
  const getPermission = (key) => {
    const orgCode = getClaimValue("org_code");
    const permissions = getClaimValue("permissions") ?? [];
    return {
      isGranted: permissions.some((p) => p === key),
      orgCode
    };
  };
  const getOrganization = () => {
    const orgCode = getClaimValue("org_code");
    return {
      orgCode
    };
  };
  const handleRedirectToApp = async (q) => {
    const code = q.get("code");
    const state = q.get("state");
    const error = q.get("error");
    if (error) {
      console.error(`Error returned from authorization server: ${error}`);
    }
    const stringState = sessionStorage.getItem(`${SESSION_PREFIX}-${state}`);
    if (!stringState) {
      console.error("Invalid state");
    } else {
      const { appState, codeVerifier } = JSON.parse(stringState);
      try {
        const response = await fetch(config.token_endpoint, {
          method: "POST",
          ...is_use_cookie && { credentials: "include" },
          headers: new Headers({
            "Content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Kinde-SDK": `${config._framework || "JavaScript"}/${config._frameworkVersion || version}`
          }),
          body: new URLSearchParams({
            client_id: config.client_id,
            code,
            code_verifier: codeVerifier,
            grant_type: "authorization_code",
            redirect_uri: config.redirect_uri
          })
        });
        const data = await response.json();
        setStore(data);
        const url = new URL(window.location.toString());
        url.search = "";
        sessionStorage.removeItem(`${SESSION_PREFIX}-${state}`);
        const user = getUser();
        window.history.pushState({}, "", url);
        if (on_redirect_callback) {
          on_redirect_callback(user, appState);
        }
      } catch (err) {
        console.error(err);
        sessionStorage.removeItem(`${SESSION_PREFIX}-${state}`);
      }
    }
  };
  const redirectToKinde = async (options2) => {
    const { app_state, start_page, is_create_org, org_name = "", org_code, authUrlParams = {} } = options2;
    const { state, code_challenge, url } = await setupChallenge(config.authorization_endpoint, app_state);
    const searchParams = {
      redirect_uri,
      client_id,
      response_type: "code",
      scope: config.requested_scopes,
      code_challenge,
      code_challenge_method: "S256",
      state
    };
    if (start_page) {
      searchParams.start_page = start_page;
    }
    if (org_code) {
      searchParams.org_code = org_code;
    }
    if (is_create_org) {
      searchParams.is_create_org = String(is_create_org);
      searchParams.org_name = org_name;
    }
    const urlSearchParams = new URLSearchParams(Object.assign(authUrlParams, searchParams));
    if (audience) {
      audience.trim().split(/\s+/).forEach((aud) => {
        urlSearchParams.append("audience", aud);
      });
    }
    url.search = String(urlSearchParams);
    window.location.href = url.toString();
  };
  const register = async (options2) => {
    await redirectToKinde({
      ...options2,
      start_page: "registration"
    });
  };
  const login = async (options2) => {
    await redirectToKinde({
      ...options2
    });
  };
  const createOrg = async (options2) => {
    await redirectToKinde({
      ...options2,
      start_page: "registration",
      is_create_org: true
    });
  };
  const getUser = () => {
    return store.getItem("user");
  };
  const getUserProfile = async () => {
    const token = await getToken();
    const headers = {
      Accept: "application/json",
      Authorization: `Bearer ${token}`
    };
    try {
      const res = await fetch(`${config.domain}/oauth2/v2/user_profile`, {
        method: "GET",
        headers
      });
      const json = await res.json();
      store.setItem("user", {
        id: json.sub,
        given_name: json.given_name,
        family_name: json.family_name,
        email: json.email,
        picture: json.picture
      });
      return store.getItem("user");
    } catch (err) {
      console.error(err);
    }
  };
  const logout = async () => {
    const url = new URL(`${config.domain}/logout`);
    try {
      store.reset();
      if (is_dangerously_use_local_storage) {
        localStorage.removeItem("kinde_refresh_token");
      }
      const searchParams = new URLSearchParams({
        redirect: logout_uri
      });
      url.search = String(searchParams);
      window.location.href = url.toString();
    } catch (err) {
      console.error(err);
    }
  };
  const init = async () => {
    const q = new URLSearchParams(window.location.search);
    if (isKindeRedirect(q)) {
      await handleRedirectToApp(q);
    } else {
      if (is_use_cookie || is_dangerously_use_local_storage) {
        await useRefreshToken();
      }
    }
  };
  const isKindeRedirect = (searchParams) => {
    const hasOauthCode = searchParams.has("code");
    if (!hasOauthCode)
      return false;
    const { protocol, host, pathname } = window.location;
    const currentRedirectUri = proxy_redirect_uri || `${protocol}//${host}${pathname}`;
    return currentRedirectUri === redirect_uri || currentRedirectUri === `${redirect_uri}/`;
  };
  await init();
  return {
    getToken,
    getIdToken,
    getUser,
    getUserProfile,
    login,
    logout,
    register,
    isAuthenticated,
    createOrg,
    getClaim,
    getFlag,
    getBooleanFlag,
    getStringFlag,
    getIntegerFlag,
    getPermissions,
    getPermission,
    getOrganization,
    getUserOrganizations
  };
};
export {
  createKindeClient as default
};
//# sourceMappingURL=@kinde-oss_kinde-auth-pkce-js.js.map
